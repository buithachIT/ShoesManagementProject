@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model IEnumerable<Shared.Models.ProductVariant>
@using System.Text.Json
@{
    var colorSizes = ViewData["ColorSizes"];
}

<head>
    <link rel="stylesheet" href="~/css/detailproduct.css" />
</head>

<div class="container w-100 d-flex justify-content-center">
    <!-- Bên trái: ảnh sản phẩm -->
    <div class="small-image d-flex mt-5 me-5">
        <div class="sub-image d-flex flex-column me-5 scroll-images">
            @foreach (var variant in Model)
            {
                foreach (var img in variant.Images)
                {
                    <img src="@Url.Content("~/image/image_product/" + img.ImageUrl)" class="mb-2 sub-img" alt="Ảnh sản phẩm"
                        width="150">
                }
            }
        </div>
        <div class="image-large">
            <div id="main-img">
                @if (Model.Any() && Model.First().Images.Any())
                {
                    <img src="@Url.Content("~/image/image_product/" + Model.First().Images.First().ImageUrl)"
                        alt="Ảnh sản phẩm chính" width="450" id="main-image">
                }
            </div>
        </div>
    </div>

    <div class="product-info mt-5 me-5 pe-5">
        <h4>@ViewData["ProductName"]</h4>
        <p>@ViewData["ProductLine"]</p>
        <p>@ViewData["ProductPrice"] <sup>đ</sup></p>
        <div class="product-variant">
            <!-- Màu -->
            <div class="pv-color d-flex mb-3">
                @foreach (var color in colorSizes as dynamic)
                {
                    <div class="product-color-container d-flex flex-column align-items-center me-4">
                        <div class="product-color mb-1 product-color"
                            style="background-color: @color.ColorHex; width: 25px; height: 25px; border-radius: 50%; cursor: pointer; border: 1px solid;"
                            onclick="selectColor('@color.ColorId')" data-color="@color.ColorId">
                        </div>
                        @if (color.Images.Count > 0)
                        {
                            <img src="@Url.Content("~/image/image_product/" + color.Images[0])" width="80" alt="Ảnh"
                                class="color-img" data-color="@color.ColorId">
                        }
                    </div>
                }
            </div>

            <!-- Size -->
            <div class="pv-size mb-4">
                <div id="size-options">
                    <p>Chọn màu để xem size</p>
                </div>
            </div>

            <div class="quantity d-flex">
                <p style="font-size: 12px; margin-right: 5px">Kho:</p>
                <p style="font-size: 12px;" id="quantity">1</p>
            </div>
            <div class="quantity d-flex align-items-center mb-2">
                <label for="inputQuantity" style="font-size: 15px; margin-right: 5px;">Số lượng:</label>
                <input type="number" id="inputQuantity" class="form-control" value="1" min="1" style="width: 70px;">
            </div>

        </div>

        <form id="cartForm" method="get" action="/Cart/AddToCart">
            <input type="hidden" name="idVariant" id="hiddenVariantId" />
            <input type="hidden" name="quantity" id="hiddenQuantity" />
            <button type="button" class="btn btn-custom btn-outline-dark" onclick="addToCart()">
                Add to cart
            </button>
        </form>
        <div id="cartMessage" class="mt-2 text-danger"></div><br>
        <div class="btn btn-custom btn-outline-dark">Buy now</div>
        <div class="description mt-5">
            <div>@ViewData["ProductDesc"]</div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        let selectedColorId = null;
        let selectedSizeId = null;
        let selectedVariantId = null;
        let quantity = null;

        //update ảnh khi click
        const mainImage = document.getElementById('main-image');
        document.querySelectorAll('.sub-img').forEach(img => {
            img.addEventListener('click', function () {
                mainImage.src = this.src;
            });
        });
        //Xử lý ColorSize
        const colorSizes = @Html.Raw(Json.Serialize(ViewData["ColorSizes"]));

        console.log("ColorSizes data:", colorSizes);

        function updateSizeOptions(colorId) {
            const sizeContainer = document.getElementById("size-options");
            sizeContainer.innerHTML = "";
            const quantityContainer = document.getElementById("quantity")
            quantityContainer.innerHTML = "";

            if (!colorId) {
                sizeContainer.innerHTML = "<p>Vui lòng chọn màu trước</p>";
                return;
            }

            const selectedColor = colorSizes.find(c => c.colorId == colorId);
            if (!selectedColor || !selectedColor.sizes) {
                sizeContainer.innerHTML = "<p>Không có size nào cho màu này</p>";
                return;
            }

            let html = "<h5>Chọn Size</h5><div class='d-flex flex-wrap'>";

            selectedColor.sizes.forEach(size => {
                if (size.quantity > 0) {
                    console.log("check quantity>>", size.quantity);

                    html += `<button class="size-btn available" class="size-btn" data-size="${size.idSize}" onclick="selectSize('${colorId}', '${size.idSize}', this)"">EU ${size.sizeValue}</button>`;
                } else {
                    html += `<button class="size-btn out-of-stock" disabled>EU ${size.sizeValue}</button>`;
                }
            });


            html += "</div>";
            sizeContainer.innerHTML = html;

        }

        function selectColor(colorId) {
            selectedColorId = colorId;
            selectedSizeId = null;
            selectedVariantId = null;

            document.querySelectorAll('.product-color').forEach(dot => {
                dot.classList.remove('selected-color');
            });
            document.querySelector(`.product-color[data-color="${colorId}"]`).classList.add('selected-color');

            document.querySelectorAll('.color-img').forEach(img => {
                img.style.display = 'none';
            });
            document.querySelectorAll(`.color-img[data-color="${colorId}"]`).forEach(img => {
                img.style.display = 'block';
            });
            updateSizeOptions(colorId);
        }
        document.addEventListener("DOMContentLoaded", function () {
            if (colorSizes && colorSizes.length > 0) {
                selectColor(colorSizes[0].colorId);
            }
        });

        function addToCart() {
            if (!selectedVariantId) {
                document.getElementById("cartMessage").innerText = "Vui lòng chọn màu và size trước.";
                return;
            }

            const quantityInput = document.getElementById("inputQuantity");
            const quantityValue = parseInt(quantityInput.value) || 1;
            const maxQuantity = parseInt(quantityInput.max);

            if (quantityValue > maxQuantity) {
                alert("Số lượng đặt vượt quá số lượng còn lại trong kho.");
                return;
            }
            document.getElementById("hiddenVariantId").value = selectedVariantId;
            document.getElementById("hiddenQuantity").value = quantityValue;
            document.getElementById("cartForm").submit();

            // Lưu vào localStorage
            let cart = JSON.parse(localStorage.getItem("cartItems")) || [];
            const index = cart.findIndex(item => item.variantId === selectedVariantId);

            if (index !== -1) {
                cart[index].quantity += quantityValue;
            } else {
                cart.push({ variantId: selectedVariantId, quantity: quantityValue });
            }

            localStorage.setItem("cartItems", JSON.stringify(cart));
            updateCartCount();
        }

        function updateCartCount() {
            const cart = JSON.parse(localStorage.getItem("cartItems")) || [];
            let total = 0;
            cart.forEach(item => {
                total += item.quantity;
            });

            const cartCountEl = document.querySelector(".count-cart");
            if (cartCountEl) {
                cartCountEl.innerText = total;
            }
        }
        document.addEventListener("DOMContentLoaded", function () {
            updateCartCount();
            if (colorSizes && colorSizes.length > 0) {
                selectColor(colorSizes[0].colorId);
            }
        });

        ///Xử lý đặt hàng
        function selectSize(colorId, sizeId, buttonElement) {
            selectedSizeId = sizeId;

            const selectedColor = colorSizes.find(c => c.colorId == colorId);
            if (!selectedColor) return;

            const sizeData = selectedColor.sizes.find(s => s.idSize == sizeId);
            if (!sizeData) return;

            selectedVariantId = sizeData.variantId;

            // Xoá class đã chọn khỏi tất cả size-btn
            document.querySelectorAll('.size-btn').forEach(btn => {
                btn.classList.remove('selected-size');
            });
            const quantityContainer = document.getElementById("quantity");
            quantityContainer.innerText = sizeData.quantity;
            document.getElementById("inputQuantity").max = sizeData.quantity;

            document.querySelectorAll('.size-btn').forEach(btn => {
                btn.classList.remove('selected-size');
            });
            // Thêm class vào button đang được click
            buttonElement.classList.add('selected-size');

            console.log("Selected variantId:", selectedVariantId);
        }
    </script>


}